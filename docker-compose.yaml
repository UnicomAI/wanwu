services:

  # ------ middleware ------

  mysql:
    restart: always
    image: ${WANWU_MYSQL_IMAGE}
    container_name: ${WANWU_MYSQL_HOST}
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 3306:3306
    volumes:
      - wanwu_mysql_data:/var/lib/mysql
      - ./configs/middleware/mysql/initdb.d:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      TZ: Asia/Shanghai
    command:
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_bin
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -u root -p$$MYSQL_ROOT_PASSWORD | grep 'mysqld is alive'"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  mysql-worker:
    depends_on:
      mysql:
        condition: service_healthy
    restart: on-failure
    image: ${WANWU_MYSQL_IMAGE}
    container_name: ${WANWU_MYSQL_HOST}-worker
    networks:
      - ${WANWU_DOCKER_NETWORK}
    volumes:
      - ./configs/middleware/mysql/initdb.d:/docker-entrypoint-initdb.d
    entrypoint: "bash -c"
    command:
      - "exec mysql --host mysql -u root -p'${WANWU_MYSQL_PASSWORD}' < /docker-entrypoint-initdb.d/init.sql"
  
  redis:
    restart: always
    image: ${WANWU_REDIS_IMAGE}
    container_name: ${WANWU_REDIS_HOST}
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 6379:6379
    volumes:
      - wanwu_redis_data:/data
    command: "redis-server --requirepass ${WANWU_REDIS_PASSWORD}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 5s
  
  minio:
    restart: always
    image: ${WANWU_MINIO_IMAGE}
    container_name: ${WANWU_MINIO_HOST}
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - wanwu_minio_data:/data
    environment:
      MINIO_ROOT_USER: ${WANWU_MINIO_USER}
      MINIO_ROOT_PASSWORD: ${WANWU_MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  kafka:
    restart: always
    image: ${WANWU_KAFKA_IMAGE}
    container_name: ${WANWU_KAFKA_HOST}
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 9092:9092
    volumes:
      - ./configs/middleware/kafka/configs/kafka-log4j.properties:/opt/bitnami/kafka/config/log4j.properties
      - ${WANWU_PROJECT_DIR}/kafka/logs:/opt/bitnami/kafka/logs
      - wanwu_kafka_data:/bitnami/kafka/data
    environment:
      # kraft
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@${WANWU_KAFKA_HOST}:9093
      # listener
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:SASL_PLAINTEXT,CONTROLLER:SASL_PLAINTEXT
      KAFKA_CFG_LISTENERS: BROKER://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://172.17.0.1:9092,CONTROLLER://${WANWU_KAFKA_HOST}:9093
      KAFKA_CLIENT_USERS: ${WANWU_KAFKA_USER}
      KAFKA_CLIENT_PASSWORD: ${WANWU_KAFKA_PASSWORD}
      # broker
      KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_INTER_BROKER_USER: ${WANWU_KAFKA_USER}
      KAFKA_INTER_BROKER_PASSWORD: ${WANWU_KAFKA_PASSWORD}
      # controller
      KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_USER: ${WANWU_KAFKA_USER}
      KAFKA_CONTROLLER_PASSWORD: ${WANWU_KAFKA_PASSWORD}
      # opt
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_CFG_HEAP_OPTS: -Xmx1G -Xms1G
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/localhost/9092' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  es-setup:
    restart: on-failure
    image: ${WANWU_ELASTIC_IMAGE}
    container_name: ${WANWU_ELASTIC_HOST}-setup
    networks:
      - ${WANWU_DOCKER_NETWORK}
    volumes:
      - wanwu_es_certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${WANWU_ELASTIC_PASSWORD} == x ]; then
          echo "Set the WANWU_ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${WANWU_KIBANA_PASSWORD} == x ]; then
          echo "Set the WANWU_KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es\n"\
          "    dns:\n"\
          "      - es\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana user ${WANWU_KIBANA_USERNAME} password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${WANWU_ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es:9200/_security/user/${WANWU_KIBANA_USERNAME}/_password -d "{\"password\":\"${WANWU_KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es/es.crt ]"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  es:
    depends_on:
      es-setup:
        condition: service_healthy
    restart: always
    image: ${WANWU_ELASTIC_IMAGE}
    container_name: ${WANWU_ELASTIC_HOST}
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 9200:9200
    volumes:
      - ./configs/middleware/elastic/plugins:/usr/share/elasticsearch/plugins
      - wanwu_es_certs:/usr/share/elasticsearch/config/certs
      - wanwu_es_data:/usr/share/elasticsearch/data
      - wanwu_es_logs:/usr/share/elasticsearch/logs
      - wanwu_es_tmp:/tmp
    environment:
      - node.name=es
      - cluster.name=wanwu-es-cluster
      - cluster.initial_master_nodes=es
      - discovery.seed_hosts=es
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es/es.key
      - xpack.security.http.ssl.certificate=certs/es/es.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es/es.key
      - xpack.security.transport.ssl.certificate=certs/es/es.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
      - ELASTIC_PASSWORD=${WANWU_ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    mem_limit: 4294967296 # 4GB
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 15s

  # ------ microservice ------

  bff-service:
    depends_on:
      minio:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: bff-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 6668:6668
    volumes:
      - ${WANWU_PROJECT_DIR}/bff-service/log:/app/log
      - ${WANWU_PROJECT_DIR}/bff-service/tmp:/app/tmp
    environment:
      SERVER_EXTERNAL_IP: ${WANWU_EXTERNAL_IP}
      SERVER_EXTERNAL_PORT: ${WANWU_EXTERNAL_PORT}
      SERVER_API_BASE_URL: ${WANWU_API_BASE_URL}
      MINIO_ENDPOINT: ${WANWU_MINIO_ENDPOINT}
      MINIO_USER: ${WANWU_MINIO_USER}
      MINIO_PASSWORD: ${WANWU_MINIO_PASSWORD}
    working_dir: /app
    command: ./bin/bff-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "6668"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  iam-service:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: iam-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    # ports:
    #   - 8888:8888
    volumes:
      - ${WANWU_PROJECT_DIR}/iam-service/log:/app/log
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DB_MYSQL_ADDRESS: ${WANWU_MYSQL_ADDRESS}
      DB_MYSQL_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      REDIS_HOST: ${WANWU_REDIS_HOST}
      REDIS_PORT: ${WANWU_REDIS_PORT}
      REDIS_PASSWORD: ${WANWU_REDIS_PASSWORD}
    working_dir: /app
    command: ./bin/iam-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8888"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  model-service:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: model-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    # ports:
    #   - 8989:8989
    volumes:
      - ${WANWU_PROJECT_DIR}/model-service/log:/app/log
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DB_MYSQL_ADDRESS: ${WANWU_MYSQL_ADDRESS}
      DB_MYSQL_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      REDIS_HOST: ${WANWU_REDIS_HOST}
      REDIS_PORT: ${WANWU_REDIS_PORT}
      REDIS_PASSWORD: ${WANWU_REDIS_PASSWORD}
    working_dir: /app
    command: ./bin/model-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8989"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  knowledge-service:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: knowledge-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    # ports:
    #   - 8889:8889
    volumes:
      - ${WANWU_PROJECT_DIR}/knowledge-service/log:/app/log
      - ${WANWU_PROJECT_DIR}/knowledge-service/static:/app/static
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DB_MYSQL_ADDRESS: ${WANWU_MYSQL_ADDRESS}
      DB_MYSQL_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      KAFKA_ADDR: ${WANWU_KAFKA_ADDRESS}
      KAFKA_USER: ${WANWU_KAFKA_USER}
      KAFKA_PASSWORD: ${WANWU_KAFKA_PASSWORD}
      MINIO_ENDPOINT: ${WANWU_MINIO_ENDPOINT}
      MINIO_USER: ${WANWU_MINIO_USER}
      MINIO_PASSWORD: ${WANWU_MINIO_PASSWORD}
    working_dir: /app
    command: ./bin/knowledge-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8889"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  rag-service:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: rag-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    # ports:
    #   - 9640:9640
    volumes:
      - ${WANWU_PROJECT_DIR}/rag-service/log:/app/log
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DB_MYSQL_ADDRESS: ${WANWU_MYSQL_ADDRESS}
      DB_MYSQL_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      REDIS_HOST: ${WANWU_REDIS_HOST}
      REDIS_PORT: ${WANWU_REDIS_PORT}
      REDIS_PASSWORD: ${WANWU_REDIS_PASSWORD}
    working_dir: /app
    command: ./bin/rag-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9640"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  assistant-service:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      es:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: assistant-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    # ports:
    #   - 8890:8890
    volumes:
      - ${WANWU_PROJECT_DIR}/assistant-service/log:/app/log
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DB_MYSQL_ADDRESS: ${WANWU_MYSQL_ADDRESS}
      DB_MYSQL_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      REDIS_HOST: ${WANWU_REDIS_HOST}
      REDIS_PORT: ${WANWU_REDIS_PORT}
      REDIS_PASSWORD: ${WANWU_REDIS_PASSWORD}
    working_dir: /app
    command: ./bin/assistant-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8890"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  app-service:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    image: ${WANWU_BACKEND_IMAGE}
    container_name: app-service
    networks:
      - ${WANWU_DOCKER_NETWORK}
    # ports:
    #   - 9988:9988
    volumes:
      - ${WANWU_PROJECT_DIR}/app-service/log:/app/log
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DB_MYSQL_ADDRESS: ${WANWU_MYSQL_ADDRESS}
      DB_MYSQL_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      REDIS_HOST: ${WANWU_REDIS_HOST}
      REDIS_PORT: ${WANWU_REDIS_PORT}
      REDIS_PASSWORD: ${WANWU_REDIS_PASSWORD}
    working_dir: /app
    command: ./bin/app-service
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9988"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s
  
  agentscope:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    image: ${WANWU_AGENTSCOPE_IMAGE}
    container_name: agentscope-wanwu
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 6672:6672
    volumes:
      - ./configs/microservice/agentscope/configs/config.yaml:/agentscope/src/agentscope/aibigmodel_workflow/config.yaml
      - ${WANWU_PROJECT_DIR}/agentscope/logs:/agentscope/logs
    environment:
      DB_NAME: ${WANWU_DB_NAME}
      DATABASE_HOST: ${WANWU_MYSQL_HOST}
      DATABASE_PORT: ${WANWU_MYSQL_PORT}
      DATABASE_PASSWORD: ${WANWU_MYSQL_PASSWORD}
      REDIS_HOST: ${WANWU_REDIS_HOST}
      REDIS_PORT: ${WANWU_REDIS_PORT}
      REDIS_PASSWORD: ${WANWU_REDIS_PASSWORD}

  # ------ nginx & frontend ------
  
  nginx:
    restart: always
    image: ${WANWU_FRONTEND_IMAGE}
    container_name: ${WANWU_NGINX_HOST}
    networks:
      - ${WANWU_DOCKER_NETWORK}
    ports:
      - 8081:8081
    volumes:
      - ${WANWU_PROJECT_DIR}/nginx/log:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/localhost/8081' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 99
      start_period: 10s

networks:
  wanwu-net:
    external: true

volumes:
  wanwu_mysql_data:
  wanwu_redis_data:
  wanwu_minio_data:
  wanwu_kafka_data:
  wanwu_es_data:
  wanwu_es_certs:
  wanwu_es_logs:
  wanwu_es_tmp:
  